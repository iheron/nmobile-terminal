{"version":3,"sources":["../src/services/terminal.ts","../src/utils/log.ts","../src/utils/util.ts","../src/services/connect.ts"],"sourcesContent":["import {LogLevelDesc} from 'loglevel'\nimport {Message, MultiClient, MultiClientOptions} from 'nkn-sdk'\nimport {v4 as uuidV4} from 'uuid'\nimport {logger} from '../utils/log'\nimport yargs from 'yargs'\nimport {parseMessage} from '../utils/util'\nimport {ConnectService} from './connect'\nimport * as fs from 'fs'\nimport * as path from 'path'\nimport {MessageContentType} from '../schema/messageEnum'\n\nexport interface MessageSender {\n  sendResultMessage(src: string, message: string): Promise<void>\n\n  sendErrorMessage(src: string, message: string): Promise<void>\n\n  sendReceiptMessage(src: string, msgId: string): Promise<void>\n\n  sendReadMessage(src: string, msgId: string): Promise<void>\n}\n\nexport interface CommandConfig {\n  name: string\n  description: string\n  builder?: (yargs: any, src: string, sender: MessageSender) => any\n  handler: (argv: any, src: string, sender: MessageSender) => Promise<void>\n}\n\nexport interface YargsConfig {\n  scriptName?: string\n  usage?: string\n  help?: boolean\n  helpAlias?: string\n  commands: CommandConfig[]\n}\n\nexport interface TerminalOptions {\n  authorizePath?: string\n  yargs?: YargsConfig\n  onUnauthorized?: (src: string, client: MessageSender) => Promise<void>\n}\n\nexport interface ProfileOptions {\n  avatar?: string\n  name?: string\n  avatar_ext?: string\n  version?: string\n}\n\nexport class Terminal implements MessageSender {\n  private connectService: ConnectService\n  private options: Partial<MultiClientOptions> & TerminalOptions\n  private sendOptions = {noReply: true, msgHoldingSeconds: 8640000}\n  public client: MultiClient\n  private authorizedAddresses: Set<string> = new Set()\n  private profile: ProfileOptions\n\n  constructor(options: Partial<MultiClientOptions> & TerminalOptions & {\n    profile: ProfileOptions\n  }) {\n    this.options = options || {}\n    this.profile = options.profile\n\n    // Bind the callback methods to preserve this context\n    this.onMessage = this.onMessage?.bind(this)\n    this.onConnect = this.onConnect?.bind(this)\n    this.onDisconnect = this.onDisconnect?.bind(this)\n    this.onError = this.onError?.bind(this)\n\n    // Load authorized addresses\n    this.loadAuthorizedAddresses()\n\n    this.connectService = new ConnectService({\n      seed: this.options.seed,\n      identifier: this.options.identifier || '',\n      numSubClients: this.options.numSubClients || 4,\n      originalClient: this.options.originalClient || true,\n      onMessage: this.onMessage,\n      onConnect: this.onConnect,\n      onDisconnect: this.onDisconnect,\n      onError: this.onError,\n    })\n  }\n\n  private loadAuthorizedAddresses(): void {\n    try {\n      const authPath = this.options.authorizePath || path.join(process.cwd(), 'authorized')\n      if (fs.existsSync(authPath)) {\n        const content = fs.readFileSync(authPath, 'utf-8')\n        const addresses = content.split('\\n')\n          .map(addr => addr.trim())\n          .filter(addr => addr.length > 0 && !addr.startsWith('#'))\n        this.authorizedAddresses = new Set(addresses)\n        logger.info(`Loaded ${this.authorizedAddresses.size} authorized addresses`)\n      } else {\n        // Create authorized file with default content\n        const defaultContent = `# Authorized NKN client addresses\n# One address per line\n# Example addresses:\n# 77dba12e1b8cb518ae1ea9b1d872098f1a19856abc4594601416adc65963df61`\n        fs.writeFileSync(authPath, defaultContent, 'utf-8')\n        logger.info(`Created authorized addresses file at ${authPath}`)\n        // Load the newly created file\n        const addresses = defaultContent.split('\\n')\n          .map(addr => addr.trim())\n          .filter(addr => addr.length > 0 && !addr.startsWith('#'))\n        this.authorizedAddresses = new Set(addresses)\n        logger.info(`Loaded ${this.authorizedAddresses.size} authorized addresses`)\n      }\n    } catch (error) {\n      logger.error('Error loading authorized addresses:', error)\n    }\n  }\n\n  private async authorize(src: string): Promise<boolean> {\n    let isAuthorized = false\n    // If no authorized addresses are loaded, allow all\n    if (this.authorizedAddresses.size === 0) {\n      isAuthorized = false\n    } else {\n      isAuthorized = this.authorizedAddresses.has(src)\n    }\n\n    if (!isAuthorized && this.options.onUnauthorized) {\n      await this.options.onUnauthorized(src, this)\n    }\n\n    return isAuthorized\n  }\n\n  private async onConnect(addr: string, node: {\n    addr: string,\n    id: string,\n    pubkey: string,\n    rpcAddr: string,\n    sdp: string\n  }): Promise<void> {\n    logger.info(`Connected. Your terminal address is ${addr}`)\n  }\n\n  private async onMessage(message: Message): Promise<void> {\n    logger.info(`Received message from ${message.src}: ${message.payload}`)\n    await this.handleMessage(message.src, message.payload)\n  }\n\n  private async onDisconnect(): Promise<void> {\n    logger.info('Disconnected from the terminal')\n  }\n\n  private async onError(error: Error): Promise<void> {\n    logger.error('Error', error)\n  }\n\n  private async handleMessage(src: string, raw: string | Uint8Array): Promise<void> {\n    try {\n      if (src === this.client.addr) {\n        return\n      }\n\n      if (typeof raw == 'string') {\n        // Parse the message\n        const message = parseMessage(raw)\n\n        if (!message) {\n          // Invalid message format\n          logger.debug(`Invalid message format from ${src}`)\n          return\n        }\n\n        if (message.contentType === MessageContentType.receipt || message.contentType === MessageContentType.read) {\n          return\n        }\n\n        if (message.contentType === MessageContentType.contactProfile) {\n          logger.info(`Received contact profile from ${src}:`, raw)\n          const avatar = fs.readFileSync(path.join(process.cwd(), this.profile.avatar))\n          const avatarExt = this.profile.avatar_ext\n          const version = this.profile.version\n          const name = this.profile.name\n          await this.sendContactProfile(src, (<any>message).requestType, name, Buffer.from(avatar).toString('base64'), avatarExt, version)\n          return\n        }\n\n        // Send a receipt for the message\n        try {\n          await this.sendReceiptMessage(src, message.id)\n          await this.sendReadMessage(src, message.id)\n        } catch (error) {\n          logger.error('Error sending receipt:', error)\n        }\n\n        if (message.contentType !== MessageContentType.text) {\n          return\n        }\n\n        // Do not process group chat messages\n        if ('topic' in message && message.topic || 'groupId' in message && message.groupId) {\n          return\n        }\n\n        if (!(await this.authorize(src))) {\n          return\n        }\n\n        if (!message.content.startsWith('/')) {\n          return\n        }\n        logger.info(`Received command from ${src}: ${message.content}`)\n\n        await this.handleCommand(message.content, src)\n\n      }\n    } catch (error) {\n      logger.error('Error handling message:', error)\n      try {\n        await this.sendErrorMessage(src, 'Internal server error')\n      } catch (error) {\n        logger.error('Error sending error response:', error)\n      }\n    }\n  }\n\n  private async handleCommand(command: string, src: string): Promise<string> {\n    try {\n      // Parse the command string into arguments\n      const commandArgs = command.substring(1)\n\n      // Get yargs configuration or use defaults\n      const yargsConfig = this.options.yargs || {\n        scriptName: '',\n        usage: '/<command> [options]',\n        help: true,\n        helpAlias: 'h',\n        commands: [],\n      }\n\n      // Configure yargs parser\n      const parser = yargs([])\n        .scriptName(yargsConfig.scriptName || '')\n        .usage(yargsConfig.usage || '/<command> [options]')\n        .help(yargsConfig.help !== false)\n        .alias(yargsConfig.helpAlias || 'h', 'help')\n\n      // Add commands from configuration\n      yargsConfig.commands.forEach(cmd => {\n        parser.command(cmd.name, cmd.description, (yargs) => {\n          if (cmd.builder) {\n            return cmd.builder(yargs, src, this)\n          }\n          return yargs\n        }, async (argv) => {\n          try {\n            await cmd.handler(argv, src, this)\n          } catch (error) {\n            logger.error(`Error executing command ${cmd.name}:`, error)\n            await this.sendErrorMessage(src, `Error executing command: ${error.message}`)\n          }\n        })\n      })\n\n      // Parse the command\n      await parser.parse(commandArgs, (error, argv, output) => {\n        if (error) {\n          logger.error('Error parsing command:', error)\n          this.sendErrorMessage(src, `Error: ${error.message}`)\n          return\n        }\n        if (output) {\n          this.sendResultMessage(src, output)\n          return\n        }\n      })\n\n      // Return help text\n      return parser.getHelp()\n    } catch (error) {\n      logger.error('Error processing command:', error)\n      return `Error: ${error.message}. Type /help for available commands.`\n    }\n  }\n\n  public async sendErrorMessage(src: string, message: string): Promise<void> {\n    const data = {\n      id: uuidV4(),\n      contentType: MessageContentType.text,\n      content: `> ⚠️ **Error**: ${message}`,\n      timestamp: Date.now(),\n    }\n    await this.client.send(src, JSON.stringify(data), this.sendOptions)\n  }\n\n  public setLogLevel(level: LogLevelDesc): void {\n    logger.setLevel(level)\n  }\n\n  public async connect(): Promise<void> {\n    await this.connectService.connect()\n    this.client = this.connectService.client\n  }\n\n  public async disconnect(): Promise<void> {\n    await this.connectService.disconnect()\n    this.client = null\n  }\n\n  public async sendReceiptMessage(src: string, msgId: string): Promise<void> {\n    const data = {\n      id: uuidV4(),\n      contentType: 'receipt',\n      targetID: msgId,\n      timestamp: Date.now(),\n    }\n    await this.client.send(src, JSON.stringify(data), this.sendOptions)\n  }\n\n  public async sendReadMessage(src: string, msgId: string): Promise<void> {\n    const data = {\n      id: uuidV4(),\n      contentType: 'read',\n      readIds: [msgId],\n      timestamp: Date.now(),\n    }\n    await this.client.send(src, JSON.stringify(data), this.sendOptions)\n  }\n\n  public async sendResultMessage(src: string, message: string): Promise<void> {\n    const data = {\n      id: uuidV4(),\n      contentType: 'text',\n      content: message,\n      timestamp: Date.now(),\n    }\n    await this.client.send(src, JSON.stringify(data), this.sendOptions)\n  }\n\n  public async sendContactProfile(src: string, responseType: string, name: string, avatar: string, avatarExt: string, version: string): Promise<void> {\n    const data: any = {\n      id: uuidV4(),\n      timestamp: Date.now(),\n      contentType: MessageContentType.contactProfile,\n      version: version,\n      responseType: responseType,\n    }\n\n    if (responseType == 'full') {\n      data.content = {\n        name: name,\n        avatar: {\n          type: 'base64',\n          data: avatar,\n          ext: avatarExt,\n        },\n      }\n    }\n\n    await this.client.send(src, JSON.stringify(data), this.sendOptions)\n  }\n}","import log, { LogLevelDesc } from 'loglevel'\n\nif (process.env.NODE_ENV === 'production') {\n  log.setDefaultLevel('info')\n} else {\n  log.setDefaultLevel('trace')\n}\n\nexport class Logger {\n  setLevel(level: LogLevelDesc) {\n    log.setLevel(level)\n  }\n\n  getLevel(): LogLevelDesc {\n    return log.getLevel()\n  }\n\n  trace(...msg: any[]): void {\n    log.trace(...msg)\n  }\n\n  debug(...msg: any[]): void {\n    log.debug(...msg)\n  }\n\n  info(...msg: any[]): void {\n    log.info(...msg)\n  }\n\n  warn(...msg: any[]): void {\n    log.warn(...msg)\n  }\n\n  error(...msg: any[]): void {\n    log.error(...msg)\n  }\n}\n\nexport const logger = new Logger()\n","import {IPayloadSchema} from '../schema/payload.ts'\nimport {logger} from './log.ts'\n\nexport function parseMessage(raw: string): IPayloadSchema | null {\n  try {\n    const payload = JSON.parse(raw) as IPayloadSchema\n\n    // Validate message has required fields\n    if (!payload.contentType || !payload.id) {\n      logger.debug('Invalid message format:', raw)\n      return null\n    }\n\n    return payload\n  } catch (error) {\n    logger.error('Failed to parse message:', error)\n    return null\n  }\n}\n\nexport function stringifyMessage(message: IPayloadSchema): string {\n  try { \n    return JSON.stringify(message)\n  } catch (error) {\n    logger.error('Failed to stringify message:', error)\n    return ''\n  }\n}\n","import {Message, MultiClient, MultiClientOptions} from 'nkn-sdk'\n\nexport enum ConnectionStatus {\n  Disconnected = 'disconnected',\n  Connecting = 'connecting',\n  Connected = 'connected'\n}\n\nexport interface ConnectServiceEvents {\n  onMessage: (message: Message) => Promise<void>\n  onConnect: (addr: string, node: {\n    addr: string,\n    id: string,\n    pubkey: string,\n    rpcAddr: string,\n    sdp: string\n  }) => Promise<void>\n  onDisconnect: () => Promise<void>\n  onError: (error: Error) => Promise<void>\n}\n\nexport class ConnectService {\n  private options: MultiClientOptions\n  private events: Partial<ConnectServiceEvents>\n  public client: MultiClient\n  private _connectStatus: ConnectionStatus = ConnectionStatus.Disconnected\n  private _waitConnected: Promise<void>\n\n  constructor(options: Partial<MultiClientOptions> & Partial<ConnectServiceEvents>) {\n    if (!options.seed) {\n      throw new Error('Seed is required')\n    }\n    this.options = {\n      seed: options.seed,\n      identifier: options.identifier || '',\n      numSubClients: options.numSubClients || 4,\n      originalClient: options.originalClient || true,\n    }\n    this.events = options\n  }\n\n  public async connect(): Promise<MultiClient> {\n    this._connectStatus = ConnectionStatus.Connecting\n    this.client = new MultiClient(this.options)\n\n    this._waitConnected = new Promise((resolve, reject) => {\n      this.client.onConnect(({node}) => {\n        this._connectStatus = ConnectionStatus.Connected\n\n        this.events.onConnect?.(this.client.addr, node)\n        resolve()\n      })\n\n      this.client.onConnectFailed(() => {\n        this._connectStatus = ConnectionStatus.Disconnected\n\n        const error = new Error('Failed to connect')\n        this.events.onError?.(error)\n        reject(error)\n      })\n    })\n\n    this.client.onMessage(async (message: Message) => {\n      this.events.onMessage?.(message)\n    })\n\n    await this.waitConnected\n    return this.client\n  }\n\n  public async disconnect(): Promise<void> {\n    await this.client.close()\n    this._connectStatus = ConnectionStatus.Disconnected\n    this.events.onDisconnect?.()\n  }\n\n  public get connectStatus(): ConnectionStatus {\n    return this._connectStatus\n  }\n\n  public get waitConnected(): Promise<void> {\n    return this._waitConnected\n  }\n}"],"mappings":"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","names":["error","yargs"]}